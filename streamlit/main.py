import streamlit as st
import requests
import io

import pandas as pd
import altair as alt
import datetime

import plotly.express as px
from pydantic import BaseModel
import json

today = datetime.datetime.now()
prev_year = today.year - 1
jan_1 = datetime.date(today.year, 1, 1)
dec_31 = datetime.date(today.year + 1, 12, 31)


class Review(BaseModel):
    like: str = ""
    difficult: str = ""
    improve: str = ""
    new_knowledge: str = ""
    positive: bool = True
    informative: bool = True
    object: int = 0


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
def display_custom_item(custom_item: Review):
    st.write(f"**–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å:**"
             f"<br>"
             f"{custom_item.like}", unsafe_allow_html=True)
    st.write(f"**–°–ª–æ–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:**"
             f"<br>"
             f"{custom_item.difficult}", unsafe_allow_html=True)
    st.write(f"**–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å:**"
             f"<br>"
             f"{custom_item.improve}", unsafe_allow_html=True)
    st.write(f"**–ß—Ç–æ–±—ã —Ö–æ—Ç–µ–ª–æ—Å—å —É–∑–Ω–∞—Ç—å:**"
             f"<br>"
             f"{custom_item.new_knowledge}", unsafe_allow_html=True)
    st.divider()


st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏",
    page_icon="üêº",
    layout="wide",
    initial_sidebar_state="expanded")

alt.themes.enable("dark")


def make_donut(input_response, input_text, input_color):
    if input_color == 'blue':
        chart_color = ['#29b5e8', '#155F7A']
    if input_color == 'green':
        chart_color = ['#27AE60', '#12783D']
    if input_color == 'orange':
        chart_color = ['#F39C12', '#875A12']
    if input_color == 'red':
        chart_color = ['#E74C3C', '#781F16']

    source = pd.DataFrame({
        "Topic": ['', input_text],
        "% value": [100 - input_response, input_response]
    })
    source_bg = pd.DataFrame({
        "Topic": ['', input_text],
        "% value": [100, 0]
    })

    plot = alt.Chart(source).mark_arc(innerRadius=45, cornerRadius=25).encode(
        theta="% value",
        color=alt.Color("Topic:N",
                        scale=alt.Scale(
                            # domain=['A', 'B'],
                            domain=[input_text, ''],
                            # range=['#29b5e8', '#155F7A']),  # 31333F
                            range=chart_color),
                        legend=None),
    ).properties(width=130, height=130)

    text = plot.mark_text(align='center', color="#29b5e8", font="Lato", fontSize=32, fontWeight=700).encode(
        text=alt.value(f'{input_response} %'))
    plot_bg = alt.Chart(source_bg).mark_arc(innerRadius=45, cornerRadius=20).encode(
        theta="% value",
        color=alt.Color("Topic:N",
                        scale=alt.Scale(
                            # domain=['A', 'B'],
                            domain=[input_text, ''],
                            range=chart_color),  # 31333F
                        legend=None),
    ).properties(width=130, height=130)
    return plot_bg + plot + text


# load data
response = requests.get("http://127.0.0.1:8000/api/v2/streamlit/get_csv_from_s3")

# Check if the request was successful (status code 200)
data = pd.read_csv("train_data.csv")
if response.status_code == 200:
    # Read the CSV data into a pandas dataframe
    data = pd.read_csv(io.StringIO(response.text))


with st.sidebar:
    st.title('üêº –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏')

    selected_webinar = st.selectbox("Select webinar", data['question_1'].unique())

    d = st.date_input(
        "Select your vacation for next year",
        (jan_1, datetime.date(today.year, 10, 7)),
        jan_1,
        dec_31,
        format="DD.MM.YYYY",
    )

    with open("sum_data.json", "r", encoding="UTF-8") as f:
        json_sum_data = json.load(f)
    sum_text = json_sum_data[selected_webinar]

try:
    data_1 = data[(data['question_1'] == selected_webinar) & data['timestamp'].apply(
        lambda x: pd.Timestamp(x).date()).between(pd.Timestamp(d[0]).date(), pd.Timestamp(d[1]).date())]
except Exception:
    data_1 = data[(data['question_1'] == selected_webinar) & data['timestamp'].apply(
        lambda x: pd.Timestamp(x).date()).between(pd.Timestamp(datetime.date(today.year, 1, 1)).date(),
                                                  pd.Timestamp(datetime.date(today.year, 12, 31)).date())]

col = st.columns((3, 5, 3))

df = data_1[['is_relevant', 'object', 'is_positive']]

with col[1]:
    st.markdown("#### –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")

    show_full_text = st.button("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∫–Ω–æ–ø–∫–∏
    if show_full_text:
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
        st.markdown(f"<div style='word-wrap: break-word;'>{sum_text}</div>", unsafe_allow_html=True)
        # –ö–Ω–æ–ø–∫–∞ "–°–∫—Ä—ã—Ç—å"
        if st.button("–°–∫—Ä—ã—Ç—å"):
            show_full_text = False
    else:
        # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
        l = min(200, len(sum_text)-1)
        teaser_text = f'{sum_text[:l]}...'
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
        st.markdown(f"<div style='word-wrap: break-word;'>{teaser_text}</div>", unsafe_allow_html=True)



with col[2]:
    st.markdown("#### –î–∏–∞–≥—Ä–∞–º–º—ã")

    grouped_data = df.groupby('object').mean().reset_index()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã —Å Plotly Express
    fig = px.bar(grouped_data, x='object', y=['is_relevant', 'is_positive'],
                 barmode='stack', title='–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∏ –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ –∫–ª–∞—Å—Å—É –æ—Ç–∑—ã–≤–∞',
                 labels={'object': '–ö–ª–∞—Å—Å –æ—Ç–∑—ã–≤–∞', 'value': '–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ', 'variable': '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞'})

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –≤ Streamlit
    st.plotly_chart(fig, use_container_width=True)

    try:
        res1 = int((data_1.is_positive == 1).sum() * 100 / data_1.shape[0])
        res2 = int((data_1.is_relevant == 1).sum() * 100 / data_1.shape[0])
    except:
        res1 = 0
        res2 = 0

    donut_chart_greater1 = make_donut(res1, 'positive', 'green')
    # st.altair_chart(donut_chart_greater1)

    donut_chart_greater2 = make_donut(res2, 'relevant', 'blue')
    # st.altair_chart(donut_chart_greater2

    donut_col = st.columns(2)
    with donut_col[0]:
        st.write('–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ')
        st.altair_chart(donut_chart_greater1, use_container_width=True)
    with donut_col[1]:
        st.write('–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ')
        st.altair_chart(donut_chart_greater2, use_container_width=True)

    objects = ["–í–µ–±–∏–Ω–∞—Ä", "–ü—Ä–æ–≥—Ä–∞–º–º–∞", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"]

    names = [objects[i] for i in df['object'].value_counts().index]
    fig_pie = px.pie(df['object'].value_counts(), labels=df['object'].value_counts().index,
                     values=df['object'].value_counts().values,
                     title='–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –æ—Ç–∑—ã–≤–æ–≤', hole=0.3,
                     names=names)
    st.plotly_chart(fig_pie, use_container_width=True)

with col[0]:
    st.markdown('#### –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏')

    options = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:",
        ["–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ", "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ", "–ù–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ", "–í–µ–±–∏–Ω–∞—Ä", "–ü—Ä–æ–≥—Ä–∞–º–º–∞", "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"]
    )


    def review_matches_options(review, options):
        if "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ" in options and not review.positive:
            return False
        if "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ" in options and review.positive:
            return False
        if "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ" in options and not review.informative:
            return False
        if "–ù–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ" in options and review.informative:
            return False
        if "–í–µ–±–∏–Ω–∞—Ä" in options and review.object != 0:
            return False
        if "–ü—Ä–æ–≥—Ä–∞–º–º–∞" in options and review.object != 1:
            return False
        if "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å" in options and review.object != 2:
            return False
        return True


    reviews = []
    for index, row in data_1.iterrows():
        review = Review(
            like=row['question_2'],
            difficult=row['question_3'],
            improve=row['question_4'],
            new_knowledge=row['question_5'],
            positive=bool(row['is_positive']),
            informative=bool(row['is_relevant']),
            object=int(row['object'])
        )
        if review_matches_options(review, options):
            reviews.append(review)

    try:
        with st.container(height=646):

            for item in reviews:
                display_custom_item(item)

    except Exception as e:
        print(e)
